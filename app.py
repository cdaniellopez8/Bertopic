import streamlit as st
import pandas as pd
from bertopic import BERTopic
from bertopic.representation import OpenAI, KeyBERTInspired
# Las importaciones de UMAP, HDBSCAN, etc., se dejan pero no se usan directamente para c√°lculos pesados
from sklearn.feature_extraction.text import CountVectorizer 
from umap import UMAP 
import openai
import os
import plotly.express as px
import nltk
import numpy as np
from nltk.corpus import stopwords
import random # Para simulaci√≥n

# --- CONFIGURACI√ìN INICIAL ---
try:
    nltk.data.find('corpora/stopwords')
except:
    nltk.download('stopwords')

# T√≠tulo y Configuraci√≥n Inicial
st.set_page_config(layout="wide", page_title="ShakiraGPT: An√°lisis de T√≥picos")
st.title("üé§ ShakiraGPT: La Evoluci√≥n Tem√°tica de una Loba üê∫")
st.markdown("---")
st.warning("üö® **MODO SIMULACI√ìN EXTREMA:** El modelo ha sido simulado con datos ficticios para evitar fallos de memoria en el entorno de despliegue. El objetivo es mostrar el **flujo de trabajo pedag√≥gico**.")

# üîë Carga de la Clave API de OpenAI (para el Paso 4)
openai_api_key = None
try:
    openai_api_key = st.secrets["openai"]["api_key"]
except (KeyError, AttributeError):
    openai_api_key = os.environ.get("OPENAI_API_KEY")

# 1. Cargar datos (letras) - Muestra M√≠nima
def load_data(file_path_shakira):
    """Carga una muestra m√≠nima de datos, ignorando embeddings."""
    try:
        df_shakira_full = pd.read_excel(file_path_shakira)
    except FileNotFoundError as e:
        st.error(f"Error: No se encontr√≥ el archivo '{file_path_shakira}'.")
        st.stop()
        
    df_shakira_full = df_shakira_full.dropna(subset=['lyrics', 'song', 'year']).sort_values(by='year').reset_index(drop=True)
    df_shakira_full['lyrics'] = df_shakira_full['lyrics'].astype(str)
    df_shakira_full['year'] = pd.to_numeric(df_shakira_full['year'], errors='coerce').fillna(0).astype(int)
    
    # Usar solo 10 CANCIONES para garantizar la estabilidad
    df_shakira = df_shakira_full.head(10)
    st.sidebar.info(f"Usando **{len(df_shakira)}** canciones para demostraci√≥n extrema.")
    
    # Crear un array de embeddings ficticios (10 canciones x 384 dimensiones)
    embeddings_dummy = np.random.rand(len(df_shakira), 384) 

    return df_shakira, embeddings_dummy

# 2. Funci√≥n de SIMULACI√ìN DEL ENTRENAMIENTO
def simulate_bertopic(docs, use_llm_representation=False):
    """Simula el entrenamiento y crea un objeto BERTopic con resultados ficticios."""
    
    # Crear un objeto BERTopic vac√≠o (solo para visualizaciones)
    topic_model = BERTopic(language="multilingual", calculate_probabilities=True)
    
    # ----------------------------------------------------
    # SIMULACI√ìN DE RESULTADOS
    # ----------------------------------------------------
    
    # Temas simulados
    topic_names_llm = {
        0: "Relaciones T√≥xicas y Venganza",
        1: "Empoderamiento Femenino y Libertad",
        2: "Baladas de Desamor Cl√°sico",
        3: "Ritmos Latinos y Celebraci√≥n",
        -1: "Outliers o Ruido"
    }

    # Crear resultados ficticios (topics y df_topics)
    topics = [random.choice([0, 1, 2, 3]) for _ in range(len(docs))]
    
    df_topics_sim = pd.DataFrame({
        'Topic': [-1, 0, 1, 2, 3],
        'Count': [1, 3, 2, 2, 2],
        'Nombre del T√≥pico (Final)': [topic_names_llm[-1], topic_names_llm[0], topic_names_llm[1], topic_names_llm[2], topic_names_llm[3]],
        'Palabras Clave (c-TF-IDF)': [
            ['ruido', 'etc'],
            ['te', 'odio', 'perro', 'celos', 'enga√±o', 'venganza'],
            ['fuerte', 'mujer', 'loba', 'libre', 'm√≠a'],
            ['piel', 'coraz√≥n', 'llorar', 'ayer', 'siempre'],
            ['cadera', 'bailar', 'fiesta', 'caliente', 'ritmo']
        ]
    })
    
    # Ajustar el 'Name' seg√∫n si se usa LLM o no (pedagog√≠a)
    if not use_llm:
        df_topics_sim['Nombre del T√≥pico (Final)'] = df_topics_sim['Palabras Clave (c-TF-IDF)'].apply(lambda x: ", ".join(x[:3]))
    
    df_topics_sim['Representation'] = df_topics_sim['Palabras Clave (c-TF-IDF)']

    # ----------------------------------------------------
    
    st.sidebar.success("‚úÖ Simulaci√≥n completada con √©xito.")
    
    # Devolver los resultados simulados
    return topic_model, topics, df_topics_sim[df_topics_sim['Topic'] != -1]


# --- EJECUCI√ìN DEL FLUJO PRINCIPAL ---

FILE_PATH_SHAKIRA = 'shak.xlsx'
FILE_PATH_EMBEDDINGS = 'embeddings.xlsx' # Archivo ignorado, pero se mantiene la referencia
df_shakira, embeddings = load_data(FILE_PATH_SHAKIRA)
docs = df_shakira['lyrics'].tolist()

st.sidebar.header("Opciones de Modelado")
use_llm = st.sidebar.toggle(
    "Usar GPT-4o-mini para nombres de T√≥picos (Paso 4)", 
    value=False,
    disabled=not openai_api_key
)

# LLAMADA A LA FUNCI√ìN DE SIMULACI√ìN
topic_model, topics, df_topics = simulate_bertopic(docs, use_llm_representation=use_llm)
df_shakira['topic'] = topics


# --------------------------------------------------------------------------------------
# ‚û°Ô∏è PASO 1: EXPLORACI√ìN DE DATOS
# --------------------------------------------------------------------------------------

st.header("1Ô∏è‚É£ Paso Inicial: Carga y Limpieza de Datos")
st.markdown(f"**Materia Prima:** Solo se usa una muestra de **{len(df_shakira)}** canciones para demostraci√≥n.")
st.dataframe(df_shakira[['song', 'year', 'lyrics']].head(), use_container_width=True)

st.markdown("---")

# --------------------------------------------------------------------------------------
# ‚û°Ô∏è PASO 2: EMBEDDINGS Y UMAP (Vis. Ficticia)
# --------------------------------------------------------------------------------------

st.header("2Ô∏è‚É£ Embeddings Ficticios y Proyecci√≥n (UMAP)")
st.markdown(f"""
**Embeddings:** Se ha simulado la carga de vectores. **Este gr√°fico no es exacto** ya que no se ejecut√≥ el algoritmo UMAP real, pero representa la distribuci√≥n esperada de t√≥picos.
""")

try:
    # Intenta llamar la visualizaci√≥n, pero puede fallar ya que el modelo no tiene UMAP real
    # Se a√±ade un modelo UMAP temporal para evitar un AttributeError
    topic_model.umap_model = UMAP(n_components=2) 
    fig_docs = topic_model.visualize_documents(docs, custom_labels=True, title="Mapa de T√≥picos (UMAP)")
    st.plotly_chart(fig_docs, use_container_width=True)
except Exception as e:
    st.info(f"Gr√°fico UMAP temporalmente deshabilitado en Modo Simulaci√≥n.")
    
st.markdown("---")

# --------------------------------------------------------------------------------------
# ‚û°Ô∏è PASO 3: AGRUPACI√ìN Y T√ìPICOS BASE (c-TF-IDF)
# --------------------------------------------------------------------------------------

st.header("3Ô∏è‚É£ Agrupaci√≥n (Ficticia) y T√≥picos Base (c-TF-IDF)")
st.markdown("Los resultados que se muestran a continuaci√≥n son **simulados** para demostrar la estructura del modelo.")

st.subheader("Palabras Clave por T√≥pico (Representaci√≥n Estad√≠stica Simulada)")
st.dataframe(
    df_topics[['Topic', 'Canciones', 'Palabras Clave (c-TF-IDF)']], 
    use_container_width=True
)

st.subheader("Visualizaci√≥n de las Palabras Clave")
# Esto intenta usar el objeto topic_model con datos simulados
try:
    fig_bar = topic_model.visualize_barchart(top_n_topics=4, n_words=6, custom_labels=True)
    st.plotly_chart(fig_bar, use_container_width=True)
except Exception as e:
    st.info(f"Gr√°fico de Barras temporalmente deshabilitado en Modo Simulaci√≥n.")

st.markdown("---")

# --------------------------------------------------------------------------------------
# ‚û°Ô∏è PASO 4: MEJORA DE LA REPRESENTACI√ìN CON LLMS
# --------------------------------------------------------------------------------------

st.header("4Ô∏è‚É£ Mejora de la Representaci√≥n con LLMs")
st.markdown("La simulaci√≥n demuestra c√≥mo una IA transforma las etiquetas estad√≠sticas en nombres legibles.")

if use_llm:
    st.success("‚úÖ ¬°Se muestra la etiqueta LLM simulada!")
    st.dataframe(
        df_topics[['Topic', 'Nombre del T√≥pico (Final)', 'Canciones', 'Palabras Clave (c-TF-IDF)']], 
        use_container_width=True
    )
else:
    st.info("üí° La etiqueta de la columna 'Nombre del T√≥pico (Final)' se cambia por las primeras palabras clave cuando el LLM est√° desactivado.")

st.markdown("---")

# --------------------------------------------------------------------------------------
# ‚û°Ô∏è PASO 5: AN√ÅLISIS FINAL (Visualizaciones)
# --------------------------------------------------------------------------------------

st.header("5Ô∏è‚É£ An√°lisis Final: T√≥picos y Tendencias Temporales")

st.subheader("Evoluci√≥n de la Prominencia Tem√°tica")
st.markdown("Este gr√°fico muestra la evoluci√≥n de los t√≥picos (los datos de tiempo son aleatorios para la simulaci√≥n).")

try:
    # Necesitamos crear un DataFrame Topics Over Time simulado para que la funci√≥n no falle
    years_sim = sorted(df_shakira['year'].unique().tolist())
    df_sim_time = pd.DataFrame({
        "Topic": [0, 1, 2, 3] * len(years_sim),
        "Words": ["Simulaci√≥n"] * 4 * len(years_sim),
        "Frequency": [random.randint(5, 25) for _ in range(4 * len(years_sim))],
        "Timestamp": [y for y in years_sim for _ in range(4)]
    })
    
    # Asignar nombres simulados para la visualizaci√≥n
    df_sim_time['Name'] = df_sim_time['Topic'].map(topic_names_llm)

    fig_time = topic_model.visualize_topics_over_time(df_sim_time, top_n_topics=4, custom_labels=True)
    st.plotly_chart(fig_time, use_container_width=True)
except Exception as e:
    st.info(f"Gr√°fico de Evoluci√≥n temporalmente deshabilitado en Modo Simulaci√≥n: {e}.")

st.markdown("---")
st.caption("Esta demostraci√≥n garantiza la ejecuci√≥n del flujo pedag√≥gico completo en el entorno de despliegue.")
